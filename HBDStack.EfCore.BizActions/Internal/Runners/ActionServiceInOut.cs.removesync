// Copyright (c) 2018 Jon P Smith, GitHub: JonPSmith, web: http://www.thereformedprogrammer.net/
// Licensed under MIT license. See License.txt in the project root for license information.

using HBD.EfCore.BizAction.PublicButHidden;
using Microsoft.EntityFrameworkCore;

namespace HBD.EfCore.BizAction.Internal.Runners;

internal class ActionServiceInOut<TBizInterface, TBizIn, TBizOut> : ActionServiceBase
{
    public ActionServiceInOut(bool requiresSaveChanges, IWrappedBizRunnerConfigAndMappings wrappedConfig)
        : base(requiresSaveChanges, wrappedConfig)
    {
    }

    public TOut RunBizActionDbAndInstance<TOut>(DbContext db, TBizInterface bizInstance, TBizIn inputData)
    {
        //var toBizCopier = DtoAccessGenerator.BuildCopier(inputData.GetType(), typeof(TBizIn), true, false, WrappedConfig.Config.TurnOffCaching);
        //var fromBizCopier = DtoAccessGenerator.BuildCopier(typeof(TBizOut), typeof(TOut), false, false, WrappedConfig.Config.TurnOffCaching);
        var bizStatus = (IBizActionStatus) bizInstance;

        //The SetupSecondaryData produced errors
        if (bizStatus.HasErrors) return default;

        //var inData = toBizCopier.DoCopyToBiz<TBizIn>(db, WrappedConfig.ToBizIMapper, inputData);

        object result = ((IGenericAction<TBizIn, TBizOut>) bizInstance).BizAction(inputData);

        //This handles optional call of save changes
        SaveChangedIfRequiredAndNoErrors(db, bizStatus);
        if (bizStatus.HasErrors) return default;

        if (typeof(TOut) == typeof(TBizOut))
            return (TOut) result;

        return WrappedConfig.FromBizIMapper.Map<TBizOut, TOut>((TBizOut) result);
    }
}